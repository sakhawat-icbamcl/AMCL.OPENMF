//Current Balance Query FundWise for CIP
 SELECT  8 AS SI, 'CIP' AS TRANS_TYPE, NVL(SUM(BALANCE),0) AS TOTAL_UNIT, 0 AS TOTAL_AMT, COUNT(REG_NO) AS TOTAL_HOLD  FROM    
 (SELECT  U.REG_BK, U.REG_BR, U.REG_NO, U.CIP, NVL(S.QTY, 0) AS SALE, NVL(R.QTY, 0) AS REPURCHASE, NVL(TOUT.QTY, 0) AS TR_OUT,
   NVL(TIN.QTY, 0) AS TR_IN, NVL(S.QTY, 0) - NVL(R.QTY, 0) - NVL(TOUT.QTY, 0) + NVL(TIN.QTY, 0) AS BALANCE   FROM   U_MASTER 
   U LEFT OUTER JOIN  (SELECT REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY   FROM    SALE   GROUP BY REG_BK, REG_BR, REG_NO) 
   S ON U.REG_BK = S.REG_BK AND U.REG_BR = S.REG_BR AND  U.REG_NO = S.REG_NO LEFT OUTER JOIN   (SELECT REG_BK, REG_BR, REG_NO,
    SUM(NVL(QTY, 0)) AS QTY   FROM REPURCHASE  GROUP BY REG_BK, REG_BR, REG_NO) R ON U.REG_BK = R.REG_BK AND U.REG_BR = R.REG_BR 
    AND   U.REG_NO = R.REG_NO LEFT OUTER JOIN  (SELECT     REG_BK_O, REG_BR_O, REG_NO_O, SUM(NVL(QTY, 0)) AS QTY FROM TRANSFER 
    GROUP BY REG_BK_O, REG_BR_O, REG_NO_O) TOUT ON U.REG_BK = TOUT.REG_BK_O AND U.REG_BR = TOUT.REG_BR_O AND  U.REG_NO = TOUT.REG_NO_O 
    LEFT OUTER JOIN   (SELECT     REG_BK_I, REG_BR_I, REG_NO_I, SUM(NVL(QTY, 0)) AS QTY   FROM TRANSFER TRANSFER_1  GROUP BY REG_BK_I,
     REG_BR_I, REG_NO_I) TIN ON U.REG_BK = TIN.REG_BK_I AND U.REG_BR = TIN.REG_BR_I AND    U.REG_NO = TIN.REG_NO_I) A WHERE CIP='Y'  
     AND (REG_BK = 'BDF')AND BALANCE>0

//Current Balance Query FundWise for NON-CIP
 SELECT  8 AS SI, 'CIP' AS TRANS_TYPE, NVL(SUM(BALANCE),0) AS TOTAL_UNIT, 0 AS TOTAL_AMT, COUNT(REG_NO) AS TOTAL_HOLD  FROM    
 (SELECT  U.REG_BK, U.REG_BR, U.REG_NO, U.CIP, NVL(S.QTY, 0) AS SALE, NVL(R.QTY, 0) AS REPURCHASE, NVL(TOUT.QTY, 0) AS TR_OUT,
   NVL(TIN.QTY, 0) AS TR_IN, NVL(S.QTY, 0) - NVL(R.QTY, 0) - NVL(TOUT.QTY, 0) + NVL(TIN.QTY, 0) AS BALANCE   FROM   U_MASTER 
   U LEFT OUTER JOIN  (SELECT REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY   FROM    SALE   GROUP BY REG_BK, REG_BR, REG_NO) 
   S ON U.REG_BK = S.REG_BK AND U.REG_BR = S.REG_BR AND  U.REG_NO = S.REG_NO LEFT OUTER JOIN   (SELECT REG_BK, REG_BR, REG_NO,
    SUM(NVL(QTY, 0)) AS QTY   FROM REPURCHASE  GROUP BY REG_BK, REG_BR, REG_NO) R ON U.REG_BK = R.REG_BK AND U.REG_BR = R.REG_BR 
    AND   U.REG_NO = R.REG_NO LEFT OUTER JOIN  (SELECT     REG_BK_O, REG_BR_O, REG_NO_O, SUM(NVL(QTY, 0)) AS QTY FROM TRANSFER 
    GROUP BY REG_BK_O, REG_BR_O, REG_NO_O) TOUT ON U.REG_BK = TOUT.REG_BK_O AND U.REG_BR = TOUT.REG_BR_O AND  U.REG_NO = TOUT.REG_NO_O 
    LEFT OUTER JOIN   (SELECT     REG_BK_I, REG_BR_I, REG_NO_I, SUM(NVL(QTY, 0)) AS QTY   FROM TRANSFER TRANSFER_1  GROUP BY REG_BK_I,
     REG_BR_I, REG_NO_I) TIN ON U.REG_BK = TIN.REG_BK_I AND U.REG_BR = TIN.REG_BR_I AND    U.REG_NO = TIN.REG_NO_I) A WHERE CIP='N'  
     AND (REG_BK = 'BDF')AND BALANCE>0

///Profession Wise Unit Holder Balance
select descr,count(*) as No_persion,SUM(Balance) as NO_UNITS from (
SELECT     OCC_CODE.DESCR, U.REG_BK, U.REG_BR, U.REG_NO, U.CIP, NVL(S.QTY, 0) AS SALE, NVL(R.QTY, 0) AS REPURCHASE, NVL(TOUT.QTY, 0) 
                      AS TR_OUT, NVL(TIN.QTY, 0) AS TR_IN, NVL(S.QTY, 0) - NVL(R.QTY, 0) - NVL(TOUT.QTY, 0) + NVL(TIN.QTY, 0) AS BALANCE
FROM         U_MASTER U LEFT OUTER JOIN
                          (SELECT     REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY
                            FROM          SALE
                            GROUP BY REG_BK, REG_BR, REG_NO) S ON U.REG_BK = S.REG_BK AND U.REG_BR = S.REG_BR AND 
                      U.REG_NO = S.REG_NO LEFT OUTER JOIN
                          (SELECT     REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY
                            FROM          REPURCHASE
                            GROUP BY REG_BK, REG_BR, REG_NO) R ON U.REG_BK = R.REG_BK AND U.REG_BR = R.REG_BR AND 
                      U.REG_NO = R.REG_NO LEFT OUTER JOIN
                          (SELECT     REG_BK_O, REG_BR_O, REG_NO_O, SUM(NVL(QTY, 0)) AS QTY
                            FROM          TRANSFER
                            GROUP BY REG_BK_O, REG_BR_O, REG_NO_O) TOUT ON U.REG_BK = TOUT.REG_BK_O AND U.REG_BR = TOUT.REG_BR_O AND 
                      U.REG_NO = TOUT.REG_NO_O LEFT OUTER JOIN
                          (SELECT     REG_BK_I, REG_BR_I, REG_NO_I, SUM(NVL(QTY, 0)) AS QTY
                            FROM          TRANSFER TRANSFER_1
                            GROUP BY REG_BK_I, REG_BR_I, REG_NO_I) TIN ON U.REG_BK = TIN.REG_BK_I AND U.REG_BR = TIN.REG_BR_I AND 
                      U.REG_NO = TIN.REG_NO_I LEFT OUTER JOIN
                      OCC_CODE ON OCC_CODE.CODE = U.OCC_CODE) A
					  group by desc
					  
					  
//CHARITY OR INSTITUTION			  
 SELECT     U.HNAME, U.REG_BK, U.REG_BR, U.REG_NO, U.CIP, NVL(S.QTY, 0) AS SALE, NVL(R.QTY, 0) AS REPURCHASE, NVL(TOUT.QTY, 0) AS TR_OUT, 
                      NVL(TIN.QTY, 0) AS TR_IN, NVL(S.QTY, 0) - NVL(R.QTY, 0) - NVL(TOUT.QTY, 0) + NVL(TIN.QTY, 0) AS BALANCE
FROM         U_MASTER U LEFT OUTER JOIN
                          (SELECT     REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY
                            FROM          SALE
                            GROUP BY REG_BK, REG_BR, REG_NO) S ON U.REG_BK = S.REG_BK AND U.REG_BR = S.REG_BR AND 
                      U.REG_NO = S.REG_NO LEFT OUTER JOIN
                          (SELECT     REG_BK, REG_BR, REG_NO, SUM(NVL(QTY, 0)) AS QTY
                            FROM          REPURCHASE
                            GROUP BY REG_BK, REG_BR, REG_NO) R ON U.REG_BK = R.REG_BK AND U.REG_BR = R.REG_BR AND 
                      U.REG_NO = R.REG_NO LEFT OUTER JOIN
                          (SELECT     REG_BK_O, REG_BR_O, REG_NO_O, SUM(NVL(QTY, 0)) AS QTY
                            FROM          TRANSFER
                            GROUP BY REG_BK_O, REG_BR_O, REG_NO_O) TOUT ON U.REG_BK = TOUT.REG_BK_O AND U.REG_BR = TOUT.REG_BR_O AND 
                      U.REG_NO = TOUT.REG_NO_O LEFT OUTER JOIN
                          (SELECT     REG_BK_I, REG_BR_I, REG_NO_I, SUM(NVL(QTY, 0)) AS QTY
                            FROM          TRANSFER TRANSFER_1
                            GROUP BY REG_BK_I, REG_BR_I, REG_NO_I) TIN ON U.REG_BK = TIN.REG_BK_I AND U.REG_BR = TIN.REG_BR_I AND 
                      U.REG_NO = TIN.REG_NO_I
WHERE     (U.REG_BK = 'BDF') AND (U.REG_TYPE = 'I')


//Convrtion from CLOSE END TO OPEN-END